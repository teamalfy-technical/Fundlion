<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Http\Exceptions\PostTooLargeException;
use Psy\Exception\ErrorException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use \Illuminate\Session\TokenMismatchException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Exception  $exception
     * @return void
     */
    public function report(Exception $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request $request
     * @param  \Exception  $exception
     * @return \Illuminate\Http\RedirectResponse
     * @return \Illuminate\Http\Response
     */
    public function render($request, Exception $exception)
    {
        if ($exception instanceof TokenMismatchException) {
            return redirect()->back()->withInput($request->except('password', '_token'))->withErrors(['error' => 'Validation token has expired. Please try again']);
        }

        if ($exception instanceof PostTooLargeException) {
            return redirect()->back()->with("warning", "System encountered an error. Please try again!");
        }

        if ($exception instanceof NotFoundHttpException){
            return redirect()->back();
        }

        if ($exception instanceof MethodNotAllowedHttpException){
            return redirect()->back();
        }

        if ($exception instanceof ForbiddenException) {
            return redirect()->back()->withInput()->withErrors('Validation token has expired. Please try again');
        }

        if ($exception instanceof ErrorException) {
            return redirect()->back()->withInput()->withErrors('Validation token has expired. Please try again');
        }

        return parent::render($request, $exception);
    }

    //Custom Script
    //**********************************************************************************************
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($request->expectsJson()) { return response()->json(['error' => 'Unauthenticated.'], 401); }

        $guard = array_get($exception->guards(), 0);

        switch ($guard)
        {
            case 'client': $login = 'clients.login';
                break;

            default: $login = 'users.login';
                break;
        }

        return redirect()->guest(route($login));
//        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }
}
